# ===================
# Quantum Serverless configs
# ===================

# ===================
# Ingress Nginx controller configs
# ===================

# Ingress Nginx controller is disabled by default to not affect cloud providers' controller configuration
nginxIngressControllerEnable: true

# ===================
# Gateway configs
# ===================

gatewayEnable: true
gateway:
  image:
    pullPolicy: IfNotPresent
    tag: "nightly"
  application:
    siteHost: "http://127.0.0.1:8000"
    rayHost: "http://serverless-cluster-kuberay-head-svc:8265"
    keycloak:
      clientId: "gateway-client"
      url: "http://serverless-cluster-keycloak/"
      realm: "quantumserverless"
      clientSecret: "secret"
      clientName: "gateway-client"
    superuser:
      username: "admin"
      password: "passw0rd"
      email: "admin@examplemail.io"

# ===================
# Redis configs
# ===================

redisEnable: true
redis:
  architecture: "standalone"

  global:
    redis:
      password: ""
  
  auth:
    enabled: false
  
  master:
    service:
      ports:
        redis: 7000

# ===================
# Jupyter configs
# ===================

jupyterEnable: true

jupyter:
  jupyterToken: "<YOUR_JUPYTER_PASSWORD_HERE>"

  image:
    repository: "qiskit/quantum-serverless-notebook"
    tag: "nightly-py39"
    pullPolicy: IfNotPresent
  
  imagePullSecrets: []

  container:
    port: 8888

  service:
    port: 80

  # If you enable it remember to enable nginx ingress controller if you need a controller for ingress
  ingress:
    enabled: false
    className: "nginx"
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    loadBalancer:
      hostname: localhost
    hosts:
      - host: localhost
        paths:
          - path: /
            pathType: Prefix


# ===================
# Ray Cluster
# ===================

rayClusterEnable: true
ray-cluster:
  nameOverride: "kuberay"
  fullnameOverride: ""

  image:
    repository: "qiskit/quantum-serverless-ray-node"
    tag: "nightly-py39"
    pullPolicy: IfNotPresent

  head:
    rayStartParams:
      dashboard-host: '0.0.0.0'
    ports: [{containerPort: 10001, name: client},{containerPort: 6379, name: redis},{containerPort: 8265, name: dashboard},{containerPort: 8080, name: metrics},{containerPort: 8000, name: serve},{containerPort: 4180, name: proxy}]
    sidecarContainers:
        - name: oauth-proxy
          image: quay.io/oauth2-proxy/oauth2-proxy:v7.3.0
          imagePullPolicy: IfNotPresent
          args:
          - --client-secret=CLIENTSECRET-CHANGEME
          - --oidc-issuer-url=http://LOCAL-IP:31059/realms/quantumserverless
          - --oidc-extra-audience="account"
          - --email-domain="*"
          - --insecure-oidc-allow-unverified-email=true
          - --http-address=0.0.0.0:4180
          - --cookie-secret=SECRET0123456789
          - --provider=keycloak-oidc
          - --client-id=rayclient
          - --upstream="http://HELM-RELEASE-kuberay-head-svc:8265"
          - --redirect-url=http://localhost/oauth2/callback
  worker:
    # If you want to disable the default workergroup
    # uncomment the line below
    # disabled: true
    replicas: 1
    type: worker

  service:
    type: ClusterIP


# ===================
# Kuberay Operator
# ===================

kuberayOperatorEnable: true
kuberay-operator:
  nameOverride: "kuberay-operator"
  fullnameOverride: "kuberay-operator"

  image:
    repository: kuberay/operator
    tag: 0.5.0
    pullPolicy: IfNotPresent

  rbacEnable: true
  ## Install Default RBAC roles and bindings
  rbac:
    create: true
    apiVersion: v1

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "kuberay-operator"

  service:
    type: ClusterIP
    port: 8080

  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 5

  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 5

  createCustomResource: true

  batchScheduler:
    enabled: false

# ===================
# Kuberay API Server
# ===================

kuberayApiServerEnable: true
kuberay-apiserver:
  nameOverride: "kuberay-apiserver"
  fullnameOverride: "kuberay-apiserver"
 
  image:
    repository: kuberay/apiserver
    tag: v0.5.0
    pullPolicy: IfNotPresent

  rbacEnable: true
  ## Install Default RBAC roles and bindings
  rbac:
    create: true
    apiVersion: v1

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "kuberay-apiserver"

  containerPort:
    - containerPort: 8888
    - containerPort: 8887
    - containerPort: 4180

  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 300m
      memory: 300Mi

  service:
    type: NodePort
    ports:
      - name: http
        port: 8888
        targetPort: 8888
        nodePort: 31888
      - name: rpc
        port: 8887
        targetPort: 8887
        nodePort: 31887
      - name: proxy
        port: 4180
        targetPort: 4180
        nodePort: 30634

  ingress:
    enabled: false

  replicaCount: 1

  sidecarContainers:
    - image: quay.io/gogatekeeper/gatekeeper:2.3.0
      imagePullPolicy: IfNotPresent
      name: gatekeeper
      args:
      - --no-redirects=true
      - --forwarding-grant-type=client_credentials
      - --listen=0.0.0.0:4180
      - --client-id=rayapiserver
      - --client-secret=APISERVERSECRET-CHANGEME
      - --discovery-url=http://LOCAL-IP:31059/realms/quantumserverless
      - --enable-logging=true
      - --verbose=true
      - --upstream-url=http://kuberay-apiserver-service:8888/

# ===================
# Keycloak 
# ===================

keycloakEnable: true
keycloakClientSecret: CLIENTSECRET-CHANGEME
keycloakApiServerSecret: APISERVERSECRET-CHANGEME
grafanaClientSecret: GRAFANASECRET-CHANGEME
keycloakAdminID: admin
keycloakAdminPassword: passw0rd
keycloakUserID: user
keycloakUserPassword: passw0rd

keycloak:
  logging:
    level: DEBUG
  service:
    type: NodePort
    nodePorts:
      http: 31059
  auth:
    adminUser: admin
    adminPassword: passw0rd
  extraVolumes:
    - name: realm
      configMap:
        name: keycloakrealm
  extraVolumeMounts:
    - name: realm
      mountPath: /opt/bitnami/keycloak/data/import
  extraStartupArgs: "--import-realm"

# ===================
# Quantum Repository
# ===================

repositoryEnable: true
repository:
  tag: "nightly"

# ===================
# Prometheus 
# ===================

prometheusEnable: true
kube-prometheus-stack:
  grafana:
    adminPassword: passw0rd
    service:
      type: NodePort
      nodePort: 32294
    grafana.ini:
      auth:
        disable_login_form: "true"
      auth.generic_oauth:
        enabled: "true"
        name: Keycloak-OAuth
        allow_sign_up: "true"
        client_id: grafana
        client_secret: GRAFANASECRET-CHANGEME
        api_url: "http://LOCAL-IP:31059/realms/quantumserverless/protocol/openid-connect/userinfo"
        auth_url: "http://LOCAL-IP:31059/realms/quantumserverless/protocol/openid-connect/auth"
        token_url: "http://LOCAL-IP:31059/realms/quantumserverless/protocol/openid-connect/token"
        role_attribute_path: "contains(roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
        allow_assign_grafana_admin: "true"
        scopes: openid email profile roles
        email_attribute_path: user@quatunserverless.org
        login_attribute_path: user
        name_attribute_path: none
      log:
        level: debug
      server:
        root_url: "http://localhost:32294/"

# ===================
# loki
# ===================

lokiEnable: true

loki:
  loki:
    commonConfig:
      replication_factor: 1
    storage:
      type: 'filesystem'
    auth_enabled: false
  write:
    replicas: 0
  read:
    replicas: 0
  backend:
    replicas: 0
  singleBinary:
    replicas: 1
  gateway:
    service:
      type: NodePort

# ===================
# promtail
# ===================

promtailEnable: true
