# ===================
# Quantum Serverless configs
# ===================

# ===================
# Ingress Nginx controller configs
# ===================

# Ingress Nginx controller is disabled by default to not affect cloud providers' controller configuration
nginxIngressControllerEnable: true

# ===================
# Redis configs
# ===================

redisEnable: true
redis:
  architecture: "standalone"

  global:
    redis:
      password: ""
  
  auth:
    enabled: false
  
  master:
    service:
      ports:
        redis: 7000

# ===================
# Jupyter configs
# ===================

jupyterEnable: true

jupyter:
  jupyterToken: "<YOUR_JUPYTER_PASSWORD_HERE>"

  image:
    repository: "qiskit/quantum-serverless-notebook"
    tag: "latest-py39"
    pullPolicy: IfNotPresent
  
  imagePullSecrets: []

  container:
    port: 8888

  service:
    port: 80

  # If you enable it remember to enable nginx ingress controller if you need a controller for ingress
  ingress:
    enabled: false
    className: "nginx"
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    loadBalancer:
      hostname: localhost
    hosts:
      - host: localhost
        paths:
          - path: /
            pathType: Prefix


# ===================
# Manager configs
# ===================

managerEnable: true
manager:
  image:
    repository: "qiskit/quantum-serverless-manager"
    tag: "latest"
    pullPolicy: IfNotPresent
    
  imagePullSecrets: []

  container:
    port: 5000

  service:
    port: 5000

  ingress:
    enabled: false


# ===================
# Ray Cluster
# ===================

rayClusterEnable: true
ray-cluster:
  nameOverride: "kuberay"
  fullnameOverride: ""

  image:
    repository: "qiskit/quantum-serverless-ray-node"
    tag: "latest-py39"
    pullPolicy: IfNotPresent

  head:
    rayStartParams:
      dashboard-host: '0.0.0.0'
    ports: [{containerPort: 10001, name: client},{containerPort: 6379, name: redis},{containerPort: 8265, name: dashboard},{containerPort: 8080, name: metrics},{containerPort: 8000, name: serve},{containerPort: 4180, name: proxy}]
    sidecarContainers:
        - args:
          - --no-redirects=false
          - --redirection-url=http://localhost/
          - --secure-cookie=false
          - --forwarding-grant-type=password
          - --listen=0.0.0.0:4180
          - --client-id=rayclient
          - --client-secret=CLIENTSECRET-CHANGEME
          - --discovery-url=http://LOCAL-IP:31059/realms/quantumserverless
          - --enable-logging=true
          - --verbose=true
          - --upstream-url=http://HELM-RELEASE-kuberay-head-svc:8265/
          image: quay.io/gogatekeeper/gatekeeper:2.1.1
          imagePullPolicy: IfNotPresent
          name: gatekeeper
  worker:
    # If you want to disable the default workergroup
    # uncomment the line below
    # disabled: true
    replicas: 1
    type: worker

  service:
    type: ClusterIP


# ===================
# Kuberay Operator
# ===================

kuberayOperatorEnable: true
kuberay-operator:
  nameOverride: "kuberay-operator"
  fullnameOverride: "kuberay-operator"

  rbacEnable: true
  ## Install Default RBAC roles and bindings
  rbac:
    create: true
    apiVersion: v1

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "kuberay-operator"

  service:
    type: ClusterIP
    port: 8080

  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 5

  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 5

  createCustomResource: true

  batchScheduler:
    enabled: false

# ===================
# Kuberay API Server
# ===================

kuberayApiServerEnable: true
kuberay-apiserver:
  nameOverride: "kuberay-apiserver"
  fullnameOverride: "kuberay-apiserver"
 
  image:
    repository: kuberay/apiserver
    tag: v0.4.0
    pullPolicy: IfNotPresent

  rbacEnable: true
  ## Install Default RBAC roles and bindings
  rbac:
    create: true
    apiVersion: v1

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "kuberay-apiserver"

  containerPort:
    - containerPort: 8888
    - containerPort: 8887
    - containerPort: 4180

  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 300m
      memory: 300Mi

  service:
    type: NodePort
    ports:
      - name: http
        port: 8888
        targetPort: 8888
        nodePort: 31888
      - name: rpc
        port: 8887
        targetPort: 8887
        nodePort: 31887
      - name: proxy
        port: 4180
        targetPort: 4180
        nodePort: 30634

  ingress:
    enabled: false

  replicaCount: 1

  sidecarContainers:
    - image: quay.io/gogatekeeper/gatekeeper:2.1.1
      imagePullPolicy: IfNotPresent
      name: gatekeeper
      args:
      - --no-redirects=true
      - --forwarding-grant-type=client_credentials
      - --listen=0.0.0.0:4180
      - --client-id=rayapiserver
      - --client-secret=APISERVERSECRET-CHANGEME
      - --discovery-url=http://LOCAL-IP:31059/realms/quantumserverless
      - --enable-logging=true
      - --verbose=true
      - --upstream-url=http://kuberay-apiserver-service:8888/

# ===================
# Keycloak 
# ===================

keycloakEnable: true
keycloakClientSecret: CLIENTSECRET-CHANGEME
keycloakApiServerSecret: APISERVERSECRET-CHANGEME
keycloakUserID: user
keycloakUserPassword: passw0rd

keycloak:
  logging:
    level: DEBUG
  service:
    type: NodePort
    nodePorts:
      http: 31059
  auth:
    adminUser: admin
    adminPassword: passw0rd
  extraVolumes:
    - name: realm
      configMap:
        name: keycloakrealm
  extraVolumeMounts:
    - name: realm
      mountPath: /opt/bitnami/keycloak/data/import
  extraStartupArgs: "--import-realm"