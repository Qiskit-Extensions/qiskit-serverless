# ===================
# Quantum Serverless configs
# ===================

# ===================
# Ingress Nginx controller configs
# ===================

# Ingress Nginx controller is disabled by default to not affect cloud providers' controller configuration
nginxIngressControllerEnable: false
ingress:
  annotations:
    # For IBM Cloud the valid ingress class values are: public-iks-k8s-nginx and private-iks-k8s-nginx
    kubernetes.io/ingress.class: "public-iks-k8s-nginx"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "512k"
  tls:
    - hosts:
        - "gateway.YOUR_INGRESS_PUBLIC_END_POINT"
        - "repository.YOUR_INGRESS_PUBLIC_END_POINT"
      secretName: "YOUR-INGRESS-SECRET"
  hosts:
    - host: "gateway.YOUR_INGRESS_PUBLIC_END_POINT"
      paths:
      - path: /
        pathType: Prefix
        serviceName: "RELEASE_NAME-gateway"
        servicePort: 8000
    - host: "repository.YOUR_INGRESS_PUBLIC_END_POINT"
      paths:
      - path: /
        pathType: Prefix
        serviceName: "RELEASE_NAME-repository"
        servicePort: 8060

# ===================
# Gateway configs
# ===================

gatewayEnable: true
gateway:
  image:
    pullPolicy: IfNotPresent
    tag: "nightly"
  application:
    siteHost: "http://localhost:8000"
    rayHost: "http://RELEASE_NAME-kuberay-head-svc:8265"
    keycloak:
      clientId: "gateway-client"
      url: "http://RELEASE_NAME-keycloak:31059"
      realm: "quantumserverless"
      clientSecret: "secret"
    superuser:
      username: "admin"
      password: "passw0rd"
      email: "admin@examplemail.io"
    service:
      type: ClusterIP
      port: 8000

# ===================
# Redis configs
# ===================

redisEnable: true
redis:
  architecture: "standalone"
  global:
    redis:
      password: ""
  auth:
    enabled: false

# ===================
# Jupyter configs
# ===================

jupyterEnable: false
jupyter:
  jupyterToken: "YOUR_JUPYTER_PASSWORD_HERE"
  image:
    repository: "qiskit/quantum-serverless-notebook"
    tag: "nightly-py39"
    pullPolicy: IfNotPresent
  container:
    port: 8888
  service:
    port: 80

# ===================
# Ray Cluster
# ===================

rayClusterEnable: true
ray-cluster:
  image:
    repository: "qiskit/quantum-serverless-ray-node"
    tag: "nightly-py39"
    pullPolicy: IfNotPresent
  head:
    rayStartParams:
      dashboard-host: "0.0.0.0"
    ports:
    - containerPort: 6379
      name: gcs
    - containerPort: 8265
      name: dashboard
    - containerPort: 10001
      name: client
    resources:
      limits:
        cpu: "4"
        # To avoid out-of-memory issues, never allocate less than 2G memory for the Ray head.
        memory: "8G"
      requests:
        cpu: "4"
        memory: "8G"
  worker:
    # If you want to disable the default workergroup
    # uncomment the line below
    disabled: true
  # The map's key is used as the groupName.
  # For example, key:small-group in the map below
  # will be used as the groupName
  additionalWorkerGroups:
    smallWorkerGroup:
      # Disabled by default
      disabled: false
      replicas: 1
      minReplicas: 1
      maxReplicas: 4
      labels: { }
      serviceAccountName: ""
      rayStartParams:
        block: 'true'
      # containerEnv specifies environment variables for the Ray container,
      # Follows standard K8s container env schema.
      containerEnv: [ ]
      # - name: EXAMPLE_ENV
      #   value: "1"
      envFrom: [ ]
      # - secretRef:
      #     name: my-env-secret
      # ports optionally allows specifying ports for the Ray container.
      # ports: []
      # resource requests and limits for the Ray head container.
      # Modify as needed for your application.
      # Note that the resources in this example are much too small for production;
      # we don't recommend allocating less than 8G memory for a Ray pod in production.
      # Ray pods should be sized to take up entire K8s nodes when possible.
      # Always set CPU and memory limits for Ray pods.
      # It is usually best to set requests equal to limits.
      # See https://docs.ray.io/en/latest/cluster/kubernetes/user-guides/config.html#resources
      # for further guidance.
      resources:
        limits:
          cpu: 4
          memory: "8G"
        requests:
          cpu: 4
          memory: "8G"
      annotations: { }
      nodeSelector: { }
      tolerations: [ ]
      affinity: { }
      # Ray container security context.
      securityContext: { }
      volumes:
        - name: log-volume
          emptyDir: { }
      # Ray writes logs to /tmp/ray/session_latests/logs
      volumeMounts:
        - mountPath: /tmp/ray
          name: log-volume
      sidecarContainers: [ ]
      # See docs/guidance/pod-command.md for more details about how to specify
      # container command for worker Pod.
      command: [ ]
      args: [ ]

# ===================
# Kuberay Operator
# ===================

kuberayOperatorEnable: true
kuberay-operator:
  image:
    repository: kuberay/operator
    tag: v0.5.0
    pullPolicy: IfNotPresent

# ===================
# Kuberay API Server
# ===================

kuberayApiServerEnable: true
kuberay-apiserver:
  nameOverride: "kuberay-apiserver"
  fullnameOverride: "kuberay-apiserver"
  image:
    repository: kuberay/apiserver
    tag: v0.5.0
    pullPolicy: IfNotPresent
  rbacEnable: true
  ## Install Default RBAC roles and bindings
  rbac:
    create: true
    apiVersion: v1
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "kuberay-apiserver"
  containerPort:
    - containerPort: 8888
    - containerPort: 8887
    - containerPort: 4180
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 300m
      memory: 300Mi
  service:
    type: NodePort
    ports:
      - name: http
        port: 8888
        targetPort: 8888
        nodePort: 31888
      - name: rpc
        port: 8887
        targetPort: 8887
        nodePort: 31887
      - name: proxy
        port: 4180
        targetPort: 4180
        nodePort: 30634
  ingress:
    enabled: false
  replicaCount: 1

# ===================
# Keycloak 
# ===================

keycloakEnable: true
keycloakClientSecret: CLIENTSECRET-CHANGEME
keycloakApiServerSecret: APISERVERSECRET-CHANGEME
grafanaClientSecret: GRAFANASECRET-CHANGEME
gatewayClientSecret: GATEWAYSECRET-CHANGEME
keycloakAdminID: admin
keycloakAdminPassword: passw0rd
keycloakUserID: user
keycloakUserPassword: passw0rd
keycloak:
  logging:
    level: DEBUG
  service:
    type: ClusterIP
    ports:
      http: 31059
  auth:
    adminUser: admin
    adminPassword: passw0rd
  extraVolumes:
    - name: realm
      configMap:
        name: keycloakrealm
  extraVolumeMounts:
    - name: realm
      mountPath: /opt/bitnami/keycloak/data/import
  extraStartupArgs: "--import-realm"

# ===================
# Quantum Repository
# ===================

repositoryEnable: true
repository:
  image:
    pullPolicy: IfNotPresent
    tag: "nightly"
  application:
    superuser:
      username: "admin"
      password: "passw0rd"
      email: "admin@examplemail.io"
  service:
    type: ClusterIP
    port: 8060

# ===================
# Prometheus 
# ===================

prometheusEnable: true
kube-prometheus-stack:
  grafana:
    adminPassword: passw0rd
    service:
      type: ClusterIP
      ports:
        http: 32294
    grafana.ini:
      auth:
        disable_login_form: "true"
      auth.generic_oauth:
        enabled: "true"
        name: Keycloak-OAuth
        allow_sign_up: "true"
        client_id: grafana
        client_secret: GRAFANASECRET-CHANGEME
        api_url: "http://RELEASE_NAME-keycloak:31059/realms/quantumserverless/protocol/openid-connect/userinfo"
        auth_url: "http://RELEASE_NAME-keycloak:31059/realms/quantumserverless/protocol/openid-connect/auth"
        token_url: "http://RELEASE_NAME-keycloak:31059/realms/quantumserverless/protocol/openid-connect/token"
        role_attribute_path: "contains(roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
        allow_assign_grafana_admin: "true"
        scopes: openid email profile roles
        email_attribute_path: user@quatunserverless.org
        login_attribute_path: user
        name_attribute_path: none
      log:
        level: debug
      server:
        root_url: "http://localhost:32294/"

# ===================
# loki
# ===================

lokiEnable: true
loki:
  loki:
    commonConfig:
      replication_factor: 1
    storage:
      type: "filesystem"
    auth_enabled: false
  write:
    replicas: 0
  read:
    replicas: 0
  backend:
    replicas: 0
  singleBinary:
    replicas: 1
  gateway:
    service:
      type: ClusterIP

# ===================
# promtail
# ===================

promtailEnable: true
