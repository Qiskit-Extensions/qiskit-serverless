name: Test QS on Kubernetes

on:
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - name: Install Kind
        run: |
          curl -Lo ./kind "https://github.com/kubernetes-sigs/kind/releases/download/v0.20.0/kind-$(uname)-amd64"
          chmod +x ./kind
          sudo mv kind /usr/local/bin
          which kind
      - name: Create Kind cluster
        run: |
          set -ex
          K8S_VERSION="1.28.7"
          cat <<EOF | kind create cluster --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            image: kindest/node:v${K8S_VERSION}
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
          EOF
          curl https://raw.githubusercontent.com/metallb/metallb/v0.13.5/config/manifests/metallb-native.yaml -k | \
          sed '0,/args:/s//args:\n        - --webhook-mode=disabled/' | \
          sed '/apiVersion: admissionregistration/,$d' | \
          kubectl apply -f -
          # Add Layer 2 config
          network=$(docker network inspect kind -f "{{(index .IPAM.Config 0).Subnet}}" | cut -d '.' -f1,2)
          cat <<EOF | kubectl apply -f -
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: first-pool
            namespace: metallb-system
          spec:
            addresses:
            - $network.255.1-$network.255.250
          ---
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: example
            namespace: metallb-system
          EOF
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
      - name: Build and load gateway
        run: |
          docker build -t gateway:test --build-arg TARGETARCH="amd64" -f ./gateway/Dockerfile .
          kind load docker-image gateway:test
          docker image rm gateway:test
      - name: Build and load ray node
        run: |
          docker build -t ray:test --build-arg TARGETARCH="amd64" -f ./Dockerfile-ray-node .
          kind load docker-image ray:test
          docker image rm ray:test
      - name: Build and load proxy
        run: |
          docker build -t proxy:test --build-arg TARGETARCH="amd64" -f ./proxy/Dockerfile .
          kind load docker-image proxy:test
          docker image rm proxy:test
      - name: Install helm chart
        run: |
          cd charts/qiskit-serverless
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add kuberay https://ray-project.github.io/kuberay-helm
          helm dependency build
          helm install qs \
            --set platform=kind \
            --set repositoryEnable=false \
            --set nginxIngressControllerEnable=false \
            --set gateway.image.repository=gateway \
            --set gateway.image.tag=test \
            --set gateway.application.ray.nodeImage=ray:test \
            --set gateway.application.ray.proxyImage=proxy:test \
            --set gateway.application.ray.cpu=1 \
            --set gateway.application.limits.keepClusterOnComplete=false \
            .
          GATEWAY=$(kubectl get pod -l app.kubernetes.io/name=gateway -o name)
          kubectl wait --for=condition=Ready "$GATEWAY" --timeout 5m
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd client
          pip install . --no-cache-dir
          pip install --no-cache-dir \
            ipywidgets==8.1.1 \
            circuit-knitting-toolbox>=0.6.0 \
            matplotlib==3.7.1 \
            pyscf==2.2.1 \
            scipy==1.10 \
            qiskit-ibm-provider>=0.9.0 \
            qiskit-aer>=0.13.3 \
            certifi==2023.7.22
          pip install nbmake pytest
      - name: Run tests
        run: |
          kubectl patch svc gateway -p '{"spec": {"type": "LoadBalancer"}}'
          export GATEWAY_HOST="http://$(kubectl get svc gateway -o jsonpath="{.status.loadBalancer.ingress[0].ip}"):8000"
          echo $GATEWAY_HOST
          # basic tests
          cd /home/runner/work/qiskit-serverless/qiskit-serverless/tests/basic
          for f in *.py; do echo "$f" && python "$f"; done
          # experimental tests
          cd /home/runner/work/qiskit-serverless/qiskit-serverless/tests/experimental
          for f in *.py; do echo "$f" && python "$f"; done
      - name: Echo gateway logs
        run: |
          GATEWAY=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" | grep gateway)
          kubectl logs $GATEWAY
      - name: Echo kuberay logs
        run: |
          KUBERAY=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" | grep kuberay)
          kubectl logs $KUBERAY
      - name: Echo scheduler logs
        run: |
          SCHEDULER=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" | grep scheduler)
          kubectl logs $SCHEDULER
      - uses: chainguard-dev/actions/kind-diag@main
        # Only upload logs on failure.
        if: ${{ failure() }}
        with:
          cluster-resources: nodes,namespaces,crds
          namespace-resources: configmaps,pods,svc,pvc
          artifact-name: logs-${{ github.run_id }}
